- alias: 'Alarm'
  trigger:
    - platform: time_pattern
      minutes: '/1'
      seconds: 0
  condition: # Условия
    - condition: template
      value_template: '{{ now().strftime("%H:%M") == states.sensor.alarm_time.state }}'

    - condition: state
      entity_id: input_boolean.alarmweekday
      state: 'on'
    - condition: time
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
  action: # Действия 
    - service: notify.telegram
      data_template:
        title: Доброе утро, Дружище! =)
        message: |
         Просыпайся, на работу пора! За окном сейчас {{ states('sensor.owm_temperature')|int }} °C.
         {{ states('sensor.owm_condition') }}.
         Скорость ветра {{ states('sensor.owm_wind_speed') }} метра в секунду.
    # - service: media_player.turn_on # Включаем медиа плеер
    #   entity_id: media_player.vlcmp # Указываем, какой именно медиа плеер нас интересует

    # - service: media_player.volume_set # Устанавливаем громкость
    #   data:
    #     entity_id: media_player.vlcmp # Указываем, какой именно медиа плеер нас интересует
    #     volume_level: '0.20' # Значение параметра Громкость

    # - service: media_player.select_source # Выбираем источник 
    #   data:
    #     entity_id: media_player.vlcmp
    #     source: NET RADIO

    # - delay: 00:00:10 # Пауза
    # - service: media_player.volume_set # Устанавливаем громкость
    #   data:
    #     entity_id: media_player.vlcmp
    #     volume_level: '0.25'

    # - delay: 00:00:01 # Пауза
    # - service: media_player.volume_set # Устанавливаем громкость
    #   data:
    #     entity_id: media_player.vlcmp
    #     volume_level: '0.30'
 
# Тут было много повторяющихся блоков с растущим значением громкости каждую секунду

    # - delay: 00:00:01
    # - service: media_player.turn_on # Включаем опять, вдруг выключен. (В идеале лучше выносить в отдельный automation)
    #   entity_id: media_player.vlcmp

    # - service: media_player.select_source
    #   data:
    #     entity_id: media_player.vlcmp # Выбираем источник - теперь это вход Audio 2 - именно к нему подключен RPi
    #     source: AUDIO2

    # - service: media_player.volume_set
    #   data:
    #     entity_id: media_player.vlcmp
    #     volume_level: '0.70'

    - delay: 00:00:01
    - service: tts.google_say # Вызываем Яндекс
      entity_id: media_player.mpdmp
      data_template:
        message: |
         Любезный сударь! Извольте выслушать краткую сводку новостей о погоде. 
         За окном сейчас {{ states('sensor.owm_temperature')|int }} градусов. {{ states('sensor.owm_condition') }}.
         Скорость ветра {{ states('sensor.owm_wind_speed') }} метра в секунду.
        # Указываем какой текст нам необходимо синтезировать

